<!-- The JavaRosa build script is structured as follows:
     Modifiable properties are stored in the external build.properties file
     The classpath for external jars is defined in the Build taskdef

     NOTE: Binary Libraries (.zip is the convention in j2me) are declared
     seperately in the binaryLibraries property. Not on the classpath!

     The BuildPolish target is associated with building the jar/jad files

     All other non-test targets essentially modify properties associated with the
     Build target
-->
<project name="JavaRosa" default="BuildClean">
	<!-- Main Target: Call to build the project -->
	<!-- This is the main work target, it actually builds the code -->
	<target name="BuildPolish" depends="init,CompileAndLinkSource" description="This is the controller for the J2ME build process.">
		<!-- A property containing the path to the preprocessed source files -->
		<property name="builtsource" value="${dir.build}/real/${device.identifier}/none/source/" />
		

		<!-- Definition of the J2ME Polish task:                      -->
		<!-- Note that this takes place here (rather than in the script in general) in order to allow the libraries jar to be compiled from source before the classpath is evaluated-->
		<taskdef name="buildPolish" classname="de.enough.polish.ant.PolishTask" classpath="${dir.tools}/j2merosa-libraries.jar:${polish.home}/lib/enough-j2mepolish-build.jar:${polish.home}/lib/jdom.jar:${wtk.home}/lib/jsr082.jar:${polish.home}/import/nokia-ui.jar:${polish.home}/import/m3g.jar:${polish.home}/import/pim.jar" />
			<path id="classpath.base">
		</path>
		
		<buildPolish>
			<info name="${app.name}"
				version="${app.version}"
				description="${app.description}"
				vendorName="${app.vendor}"
				infoUrl="${app.infoUrl}"
				jarName="${app.jarName}"
				jarUrl="${deploy-url}${app.jarName}" copyright="" />

			<!-- selection of supported devices, set this in build.properties -->
			<deviceRequirements>
				<requirement name="Identifier" value="${device.identifier}" />
			</deviceRequirements>

			<!-- build settings -->
			<!-- 'menu' here designates that we're using the fullscreen Polish UI with native menus -->
			<!-- We should see if we can set these first two attributes as properties instead-->
			<build fullscreen="menu"
				usePolishGui="${javarosa.usepolishui}"
				workDir="${dir.work}"
				destDir="${dir.dist}">
				
				<libraries>
					<library dir="${dir.lib}" />
				</libraries>

				<jad>
					<attribute name="FormTest-Build-Version" value="${formtest-build-version}" />
					<attribute name="JR-Build-Version" value="${jr-build-version}" />
					<attribute name="Polish-Device" value="${device.identifier}" />
				</jad>
				
				<!-- midlets definition -->
				<midlet class="${app.class}" name="${app.name}" />

				<!-- Code source files to include in compilation -->
				<!-- All source-level inclusions should be made here -->
				<sources>
					<source dir="${dir.src}"/>
				</sources>

				<!-- Build variables -->
				<variables includeAntProperties="true">
					<variable file="configuration/configuration.properties" />
				</variables>

				<!-- Resources that should be used in the Polish build (images, the polish.css file, etc) -->
                <resources defaultexcludes="no" excludes="readme.txt">
                    <root dir="${dir.resources-external}" />
                    <root dir="${dir.resources}" />
                    <!-- Set the language for the strings in the application -->
                    <localization>
                        <locale name="none" />
                    </localization>
                </resources>
				
				<!-- Properties of the actual javac compiler -->
				<compiler debug="on" includeJavaRuntime="yes" classpath="${polish.home}/import/enough-j2mepolish-client.jar:${polish.home}/import/fileconnection.jar:${polish.home}/import/j2me-lib_1.1.jar:${wtk.home}/lib/jsr082.jar:${polish.home}/import/nokia-ui.jar:${polish.home}/import/m3g.jar:${polish.home}/import/wmapi.jar:${wtk.home}/lib/jsr75.jar:${polish.home}/import/pim.jar"/>
				
				<postcompiler name="java5"/>
				<postcompiler name="serialization" if="org.javarosa.polish.serialization"/>
				

			</build>

			<!-- execution of emulator(s) -->
			<!-- Target one: Run emulator and profiling tools if debugging is enabled -->
			<emulator wait="true" securityDomain="trusted" enableProfiler="true" enableMemoryMonitor="true" enableNetworkMonitor="false" if="debug">
				<!-- Enable the following line to test memory constraints on the device -->
				<!--parameter name="-Xheapsize" value="2897152"/-->
			</emulator>

			<!-- Target two: Run emulator only, with no profiling tools if debugging is disabled but testing is -->
			<emulator wait="true" trace="none" securityDomain="trusted" enableProfiler="false" enableMemoryMonitor="false" enableNetworkMonitor="false" if="test and not debug">
				<!-- Enable the following line to test memory constraints on the device -->
				<!--parameter name="-Xheapsize" value="2897152"/-->
				<!--debugger port="6001" /-->
			</emulator>

		</buildPolish>
	</target>
	
	<target name="CompileAndLinkSource" if="compile.from.source.true">
			<ant antfile="${dir.jrlibs}/build.xml" target="package" inheritAll="false" inheritRefs="false">
				<property name="polish.home" value="${polish.home}"/>
			</ant>
			<copy file="${dir.jrlibs}/dist/j2merosa-libraries.jar" todir="${dir.tools}"/>
	</target>

	<!-- Main Target: Call to clean directories created by a build -->
	<target name="Clean" description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="${dir.build}" />
		<delete dir="${dir.dist}" />
	</target>
		
	<!-- Main Target: Cleans, and then runs the build target with the emulator -->
	<target name="BuildClean" description="allows a clean build, and then launches the emulator" depends="Clean, BuildPolish" />

	<!-- Initialization for the build targets                    -->
	<target name="init">
		<condition property="compile.from.source.true">
			<equals arg1="${compile.source}" arg2="true" />
		</condition>
		
		<exec executable="hg" outputproperty="formtest-build-version">
			<arg line="parents --template {node|short}"/>
		</exec>

		<taskdef name="if" onerror="report" classname="net.sf.antcontrib.logic.IfTask" classpath="${dir.tools}/ant-contrib.jar" />
		<if>
			<equals arg1="${compile.source}" arg2="true" />
			<then>
				<exec executable="hg" outputproperty="jr-build-version">
					<arg line="parents --template {node|short} -R &quot;${root.dir}&quot;"/>
				</exec>
			</then>
			<else>
				<unzip src="${dir.tools}/j2merosa-libraries.jar" dest="${dir.build}">
				    <patternset>
				        <include name="javarosa.properties"/>
				    </patternset>
				</unzip>
				<property file="${dir.build}/javarosa.properties" /> 
			</else>
		</if>
	</target>
	
	<!-- import local specific properties                          -->
	<property file="${basedir}/local.properties" />
	
	<!-- import build specific properties                          -->
	<property file="${basedir}/build.properties" />

	<!-- import global properties                                 -->
	<property file="${polish.home}/global.properties" />

</project>

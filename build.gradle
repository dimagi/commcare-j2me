apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

sourceCompatibility = 1.7

repositories {
    mavenCentral()
}

checkstyle {
    toolVersion = "6.7"
}

findbugs {
  ignoreFailures = true
  sourceSets = [sourceSets.main]
  effort = "max"
}

pmd {
  ignoreFailures = true
  sourceSets = [sourceSets.main]
}

test {
  reports.junitXml.destination = file('build/reports/tests')
}

sourceSets {
    // javarosa configs
    javarosa {
          java {
              srcDir 'javarosa/src/main/java'
          }
    }
    harness {
        java {
            srcDir 'javarosa/util/schema-gen/src'
            srcDir 'javarosa/src/main/java'
        }
        resources{
            srcDir 'javarosa/src/test/resources'
        }
    }

    translate {
        java {
            srcDir 'javarosa/util/schema-gen/src'
            srcDir 'javarosa/util/validator/org.javarosa.xform.validator/src'
            srcDir 'javarosa/src/main/java'
        }
    }

    // commcare configs
  main {
        java {
            srcDir 'javarosa/src/main/java'
            srcDir 'cases/src'
            srcDir 'backend/src'
            srcDir 'core'
            srcDir 'modern'
        }
        resources {
            srcDir 'cases/resources'
        }
  }

  cli {
      java {
          srcDir 'util/src'
          compileClasspath += main.output + harness.output
      }
  }
    api {
        java {
            srcDir 'api'
            compileClasspath += main.output
        }
    }

    test {
        java {
            srcDir 'tests/test'
            srcDir 'javarosa/src/test/java'
            compileClasspath += api.output
        }
        resources{
            srcDir 'tests/resources'
            srcDir 'javarosa/src/test/resources'
        }
    }

}

dependencies {
      compile 'kxml2:kxml2:2.3.0'
      compile files('javarosa/lib/regexp-me.jar')

      cliCompile 'commons-cli:commons-cli:1.3.1'
      cliCompile 'xpp3:xpp3:1.1.4c'

      testCompile sourceSets.main.output
      testCompile sourceSets.api.output
      testCompile sourceSets.cli.output
      testCompile 'junit:junit:4.12'
      testCompile 'org.json:json:20140107'
      testCompile 'org.xerial:sqlite-jdbc:3.8.11.1'

      apiCompile sourceSets.main.output
      apiCompile 'org.xerial:sqlite-jdbc:3.8.11.1'

      harnessCompile 'kxml2:kxml2:2.3.0'
      harnessCompile 'xpp3:xpp3:1.1.4c'
      harnessCompile 'commons-cli:commons-cli:1.3.1'
      harnessCompile files('javarosa/lib/regexp-me.jar')
      harnessCompile files('javarosa/util/schema-gen/lib/json-simple-1.1.1.jar')

      translateCompile 'kxml2:kxml2:2.3.0'
      translateCompile 'xpp3:xpp3:1.1.4c'
      translateCompile 'commons-cli:commons-cli:1.3.1'
      translateCompile files('javarosa/lib/regexp-me.jar')
      translateCompile files('javarosa/util/schema-gen/lib/json-simple-1.1.1.jar')
}

jar {
    baseName = "commcare-libraries"
}

jar.dependsOn test

configurations {
  cliOutput.extendsFrom (cliCompile)
  harness
  translate
  testsAsJar
}

task cliJar(type: Jar, dependsOn: cliClasses) {
    baseName = "commcare-cli"
    from sourceSets.cli.output
    from sourceSets.main.output
    from {
        configurations.cliCompile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.cliRuntime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes 'Main-Class': 'org.commcare.util.cli.CliMain'
    }
    
}

task apiJar(type: Jar, dependsOn: apiClasses) {
    baseName = "commcare-api"
    from sourceSets.api.output
    from sourceSets.main.output
    from {
        configurations.apiCompile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.apiRuntime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

task harnessJar(type: Jar, dependsOn: harnessClasses) {
    baseName = "javarosa-cli"
    from sourceSets.harness.output
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes 'Main-Class': 'org.javarosa.engine.Harness'
    }
}

// used to provide the test source files to external projects, such as odk,
// which might want to import classes
task testsrcJar(type: Jar, dependsOn: testClasses) {
    classifier = 'tests'
    from files(sourceSets.test.output.classesDir)
}


task formTranslateJar(type: Jar, dependsOn: translateClasses) {
    baseName = "form_translate"
    from sourceSets.translate.output
    from {
        configurations.translateCompile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.translateRuntime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes 'Main-Class': 'org.javarosa.xform.schema.Harness'
    }
}

artifacts {
  cliOutput cliJar
  harness harnessJar
  translate formTranslateJar
  testsAsJar testsrcJar
}

task copyTestResources(type: Copy) {
    from sourceSets.test.resources
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

def buildDeps = hasProperty('javarosaDeps') ? javarosaDeps : null

/* for use primarily by the build server to extract the required 3rd-party
libraries into the javarosa source tree. to use this in your own build, set the
'extract-libs-fresh' property, then also set the 'javarosa-deps' property to
the path of the library archive (make sure you are using the version of the
archive compatible with the version you wish to build) */
task extractLibs(type: Copy) {
    if (buildDeps != null) {
        from zipTree(file("${buildDeps}")) into file("${projectDir}")
    }
}

compileJava.dependsOn extractLibs


task jenkinsTest {
    inputs.files test.outputs.files
    doLast {
        def timestamp = System.currentTimeMillis()
        test.getReports().getJunitXml().getDestination().eachFile { it.lastModified = timestamp }
    }
}

check.dependsOn(jenkinsTest)

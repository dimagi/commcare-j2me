apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

sourceCompatibility = 1.7

repositories {
    mavenCentral()
}

checkstyle {
    toolVersion = "6.7"
}

findbugs {
    ignoreFailures = true
    sourceSets = [sourceSets.main]
    effort = "max"
}

pmd {
    ignoreFailures = true
    sourceSets = [sourceSets.main]
}

test {
    reports.junitXml.destination = file('build/reports/tests')
}

sourceSets {
    main {
        java {
            srcDir 'core/src/main/java'
        }
    }

    harness {
        java {
            srcDir 'core/src/main/java'
            srcDir 'util/schema-gen/src'
        }
        resources{
            srcDir 'core/src/test/resources'
        }
    }

    test {
        java {
            srcDir 'core/src/test/java'
        }
        resources{
            srcDir 'core/src/test/resources'
        }
    }
}


dependencies {
    compile 'kxml2:kxml2:2.3.0'
    compile files('lib/regexp-me.jar')

    testCompile 'junit:junit:4.12'

    harnessCompile 'kxml2:kxml2:2.3.0'
    harnessCompile files('lib/regexp-me.jar')
    harnessCompile 'xpp3:xpp3:1.1.4c'
    harnessCompile files('util/schema-gen/lib/json-simple-1.1.1.jar')
    harnessCompile files('util/schema-gen/lib/commons-cli-1.3.1.jar')
}

jar {
    baseName = "javarosa-libraries"
}

task harnessJar(type: Jar) {
    baseName = "harness"
    from sourceSets.harness.output
}

task copyTestResources(type: Copy) {
  from sourceSets.test.resources
  into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

def buildDeps = hasProperty('javarosaDeps') ? javarosaDeps : null

/* for use primarily by the build server to extract the required 3rd-party
libraries into the javarosa source tree. to use this in your own build, set the
'extract-libs-fresh' property, then also set the 'javarosa-deps' property to
the path of the library archive (make sure you are using the version of the
archive compatible with the version you wish to build) */
task extractLibs(type: Copy) {
    if (buildDeps != null) {
        from zipTree(file("${buildDeps}")) into file("${projectDir.parent}")
    }
}

compileJava.dependsOn extractLibs

task jenkinsTest {
    inputs.files test.outputs.files
    doLast {
        def timestamp = System.currentTimeMillis()
        test.getReports().getJunitXml().getDestination().eachFile { it.lastModified = timestamp }
    }
}

check.dependsOn(jenkinsTest)

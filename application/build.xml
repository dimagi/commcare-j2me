<!-- The JavaRosa build script is structured as follows:
     Modifiable properties are stored in the external build.properties file
     The classpath for external jars is defined in the Build taskdef

     NOTE: Binary Libraries (.zip is the convention in j2me) are declared
     seperately in the binaryLibraries property. Not on the classpath!

     The BuildPolish target is associated with building the jar/jad files

     All other non-test targets essentially modify properties associated with the
     Build target
-->
<project name="CommCare" default="LaunchEmulator">
    <!-- Main Target: Call to build the project -->
    <!-- This is the main work target, it actually builds the code -->
    <target name="BuildPolish" depends="init, CompileAndLinkSource, UpdateBuildNumber, SetDefaults" description="This is the controller for the J2ME build process.">

        <!-- Definition of the J2ME Polish task:                      -->
        <taskdef name="buildPolish" classname="de.enough.polish.ant.PolishTask" classpath="${dir.tools}/j2merosa-libraries.jar:${polish.home}/lib/enough-j2mepolish-build.jar:${polish.home}/lib/jdom.jar:${polish.home}/lib/j2me-lib_1.1.jar:${polish.home}/lib/microewt_0.92.jar:${polish.home}/lib/microEWT-Examples.jar:${polish.home}/import/nokia-ui.jar:${polish.home}/import/m3g.jar:${polish.home}}/import/btapi.jar:${wtk.home}/lib/jsr082.jar:${wtk.home}/lib/jsr82.jar:${polish.home}/import/cldc-1.1-java5.jar:${polish.home}/import/enough-j2mepolish-client-java5.jar" />
            <path id="classpath.base">
        </path>

        <!-- If not already set, set to nothing -->
        <property name="dest.suffix" value=""/>

        <!-- If not already set, set to nothing -->
        <property name="device.dir.dist" value="${dir.dist.root}${dest.suffix}"/>

        <!-- extract shared resources for j2merosa lib -->
        <unzip src="${dir.tools}/j2merosa-libraries.jar" dest="${dir.build}">
            <patternset>
                <include name="resources/*"/>
            </patternset>
        </unzip>

        <property name="cc-content-version" value="unversioned" />
        <property name="key.keystore" value="" />
        <buildPolish>
            <info name="${app.name}"
                version="${app.version}"
                description="${app.description}"
                vendorName="${app.vendor}"
                infoUrl="${app.infoUrl}"
                jarName="${app.jarName}"
                jarUrl="${deploy-url}${app.jarName}" copyright="" />

            <!-- selection of supported devices, set this in build.properties -->
            <deviceRequirements if="build.batch">
                <requirement name="Feature" value="javarosa" />
            </deviceRequirements>

            <deviceRequirements unless="build.batch">
                <requirement name="Identifier" value="${device.identifier.test}" />
            </deviceRequirements>

            <!-- build settings -->
            <!-- 'menu' here designates that we're using the fullscreen Polish UI with native menus -->
            <!-- We should see if we can set these first two attributes as properties instead-->
            <build fullscreen="menu"
                usePolishGui="${javarosa.usepolishui}"
                workDir="${dir.work}"
                destDir="${device.dir.dist}">

                <libraries>
                        <library dir="${dir.lib}" unless="polish.blackberry"/>
                    <library file="${dir.lib}/regexp-me.jar" if="polish.blackberry"/>
                    <library file="${dir.lib}/kxml2-2.3.0.jar" if="polish.blackberry"/>
            <!--        <library file="${dir.tools}/j2meunit-javarosa.jar" if="unittests" />  -->
                </libraries>

                <jad>
                    <attribute name="App-Version" value="${app.version}"/>
                    <attribute name="CommCare-Version" value="${commcare.version}"/>
                    <attribute name="CC-Content-Version" value="${cc-content-version}" />
                    <attribute name="CC-Build-Version" value="${cc-build-version}" />
                    <attribute name="JR-Build-Version" value="${jr-build-version}" />
                    <attribute name="Polish-Device" value="${polish.identifier}" />
                    <attribute name="Built-on" value="${built-on}" />
                    <attribute name="Build-Number" value="${commcare.build.number}"/>

                    <!-- Release property can't go in jad if it will be changed -->
                    <!--attribute name="CommCare-Release"    value="${commcare.release}" /-->
                    <attribute name="Profile" value="${commcare.profile}"/>

                    <attribute name="Skip-Validation" value="${skip.validation}"/>

                    <attribute name="MIDlet-Permissions" if="sign.locally"
                     value="javax.microedition.io.Connector.file.read, javax.microedition.io.Connector.file.write, javax.microedition.io.Connector.http, javax.microedition.io.Connector.https, javax.microedition.io.Connector.ssl, javax.microedition.media.control.VideoControl.getSnapshot, javax.microedition.io.Connector.comm, javax.microedition.io.Connector.sms, javax.wireless.messaging.sms.send"
                    />
                </jad>


                <!-- We rely on the jad file to be able to change properties post-compile, so
                we need to ensure that any non-static properties don't make it into the manifest file-->
                <manifestFilter>
                    Manifest-Version, MIDlet-Name, MIDlet-Version, MIDlet-Vendor,
                    MIDlet-Description?, MIDlet-Icon?, MIDlet-Info-URL?,
                    MIDlet-1, MIDlet-2?, MIDlet-3?, MIDlet-4?, MIDlet-5?,
                    MicroEdition-Profile, MicroEdition-Configuration,
                    MIDlet-Data-Size?,
                    MicroEdition-*,
                    Polish-*
                </manifestFilter>



                <!-- midlets definition -->
                <midlet class="${app.class}" name="${app.name}" icon="${app.icon}"/>

                <!-- Code source files to include in compilation -->
                <!-- All source-level inclusions should be made here -->
                <sources>
                    <source dir="${dir.src}"/>
                    <source dir="${dir.commcare}/src/"/>
                    <source dir="${dir.commcare.cases}/src/"/>
		            <source dir="${dir.commcare.core}/"/>

                    <!--Taking this out for now...-->
                    <!--source dir="${dir.test}"/-->
                </sources>

                <!-- Build variables -->
                <variables includeAntProperties="true">
                    <variable file="configuration/configuration.properties" />
                    <variable file="polish.keyboardhacks.properties" if="polish.customkeys"/>
                    <variable name="polish.TextField.useDirectInput" value="true" unless="polish.international"/>
                    <variable name="polish.FullScreen" value="false" if="${ isOS( Windows ) }" />
                    <variable name="obfuscate.force.no" value="true" if="${ isOS( Windows ) } or polish.noobfuscate" />
                </variables>

                <!-- Resources that should be used in the Polish build (images, the polish.css file, etc) -->
                <resources defaultexcludes="no" excludes="readme.txt,.project">
                    <root dir="${dir.commcare.cases.resources}" />
                    <root dir="${dir.resources-external}" />
                    <root dir="${dir.resources}"/>
                    <root dir="${dir.resources}" includeSubDirs="true" includeBaseDir="false"/>
                    <root dir="${dir.resources.app}" if="dir.resources.app:defined"/>
                    <root dir="${dir.resources.app}" if="dir.resources.app:defined" includeSubDirs="true" includeBaseDir="false"/>
                    <!-- Set the language for the strings in the application -->
                    <localization>
                        <locale name="none" />
                    </localization>
                </resources>


                <!-- Whether to run the obfuscator, which makes reverse engineering the byte-code
                     more difficult, and compresses the built JAR -->
                <!-- obfuscator settings: do not obfuscate when the test-property is true -->
                <obfuscator name="ProGuard" unless="((noobfuscate or test) and not release) or polish.blackberry or obfuscate.force.no">
                    <parameter name="optimize" value="true" />
                    <!-- removing until there's a fix -->

                    <!-- Unfortunately, the ${polish.device} identifier isn't available in the regular ANT context, so we can't actually properly
                         place these obfuscation maps anywhere yet -->
                    <!--parameter name="printmapping" value="'dist/obfuscation_mapping.txt'"/-->

          <parameter name="dontskipnonpubliclibraryclasses" value="" />
          <parameter name="dontskipnonpubliclibraryclassmembers" value="" />
          <parameter name="ignorewarnings" value="" />
          <!--  <parameter name="dontobfuscate" value="" />  -->

                    <!-- none of the parameter names below can be the same, or else they will clobber previous parameters; hence the varied spacing -->
                    <parameter name="keep,allowshrinking" value="!abstract class org.javarosa.core.model.* implements org.javarosa.core.model.IFormElement" />
                    <parameter name="keep, allowshrinking" value="!abstract class org.javarosa.core.model.instance.* implements org.javarosa.core.model.IFormDataModel" />
                    <parameter name="keep ,allowshrinking" value="!abstract class org.javarosa.core.model.instance.* extends org.javarosa.core.model.instance.TreeElement" />
                    <parameter name="keep,  allowshrinking" value="class org.javarosa.core.model.instance.TreeElement" /> <!-- needed to avoid preverify error -->
                    <parameter name="keep , allowshrinking" value="!abstract class org.javarosa.core.model.data.* implements org.javarosa.core.model.data.IAnswerData" />
                    <parameter name="keep  ,allowshrinking" value="class org.javarosa.model.xform.XPathReference" />
                    <parameter name="keep,   allowshrinking" value="!abstract class org.javarosa.xpath.* implements org.javarosa.core.model.condition.IConditionExpr" />
                    <parameter name="keep ,  allowshrinking" value="!abstract class org.javarosa.xpath.expr.* extends org.javarosa.xpath.expr.XPathExpression" />
                    <parameter name="keep  ,  allowshrinking" value="!abstract class org.javarosa.communication.http.* implements org.javarosa.core.services.transport.ITransportDestination"/>
                    <parameter name="keep " value="!abstract class org.javarosa.** implements org.javarosa.core.services.transport.IDataPayload"/>
                    <parameter name="keep,    allowShrinking" value="!abstract class org.javarosa.** implements org.javarosa.core.services.transport.IDataPayload"/>
                    <parameter name="keep  " value="!abstract class org.javarosa.** implements org.javarosa.core.data.IDataPointer"/>
                    <parameter name="keep,     allowShrinking" value="!abstract class org.javarosa.** implements org.javarosa.core.data.IDataPointer"/>
                    <parameter name="keep    ,   allowshrinking" value="class org.javarosa.model.GraphDataGroup" />
                    <parameter name="keep   ,     allowShrinking" value="!abstract class org.javarosa.** implements org.javarosa.core.services.locale.LocaleDataSource"/>
                    <parameter name="keep        ,       allowShrinking" value="class * implements org.javarosa.services.transport.TransportMessage"/>
                    <parameter name="keep       ,         allowShrinking" value="class * implements org.javarosa.core.services.storage.WrappingStorageUtility.SerializationWrapper"/>
                    <parameter name="keep          ,         allowShrinking" value="class * implements org.commcare.resources.model.ResourceInstaller"/>
                    <parameter name="keep              " value="class org.javarosa.core.model.SubmissionProfile"/>
                    <parameter name="keep                ,              allowShrinking" value="class * extends org.javarosa.core.model.SubmissionProfile"/>
                    <parameter name="keep                  ,                allowShrinking" value="!abstract class * extends org.javarosa.core.model.instance.DataInstance"/>
                    <parameter name="keep                  ,                 allowShrinking" value="!abstract class * extends org.javarosa.core.model.actions.Action"/>
                </obfuscator>

                <!-- log settings: only use debug setting when the test-property is true -->
                <debug if="test" showLogOnError="true" verbose="true" level="error">
                    <filter pattern="org.celllife.clforms.*" level="debug" />
                </debug>
                <!-- Properties of the actual javac compiler -->
                    <compiler debug="on"/>

                <postcompiler name="java5" />

                <sign if="sign.locally"
                    keystore="${key.keystore}"
                    key="${key.keyname}"
                    password="${key.password}"
                />

            </build>

            <!-- execution of emulator(s) -->
            <!-- Target one: Run emulator and profiling tools if debugging is enabled -->
            <emulator wait="true" securityDomain="trusted" enableProfiler="false" enableMemoryMonitor="true" enableNetworkMonitor="false" if="debug">
                <!-- Enable the following line to test memory constraints on the device -->
                <!--parameter name="-Xheapsize" value="850000"/-->
                <parameter name="-Xheapsize" value="${emulator.heap}"/>
            </emulator>

            <!-- Target two: Run emulator only, with no profiling tools if debugging is disabled but testing is -->
            <emulator wait="true" trace="none" securityDomain="trusted" enableProfiler="false" enableMemoryMonitor="false" enableNetworkMonitor="false" if="test and not debug">
                <!-- Enable the following line to test memory constraints on the device -->
                <parameter name="-Xheapsize" value="${emulator.heap}"/>
            </emulator>

        </buildPolish>
    </target>

    <target name="SetDefaults" description="Uses the defaults from the build.properties if nothing has previously set the properties">
        <condition property="commcare.release" value="${commcare.default.release}">
            <not>
                <isset property="commcare.release"/>
            </not>
        </condition>
        <echo message="CommCare Release: ${commcare.release}" />
    </target>

    <target name="UpdateBuildNumber" description="Get the revision numbers of the various things from mercurial">

        <taskdef name="if" onerror="report" classname="net.sf.antcontrib.logic.IfTask" classpath="${dir.tools}/ant-contrib.jar" />
        <if>
            <equals arg1="${compile.source}" arg2="true" />
            <then>
                
            </then>
            <else>
                <unzip src="${dir.tools}/j2merosa-libraries.jar" dest="${dir.build}">
                    <patternset>
                        <include name="javarosa.properties"/>
                    </patternset>
                </unzip>
                <property file="${dir.build}/javarosa.properties" />
            </else>
        </if>

        <tstamp><format property="built-on" pattern="yyyy-MMM-dd HH:mm" timezone="UTC" /></tstamp>
     </target>

    <target name="CompileAndLinkSource" if="compile.from.source.true">
        <ant antfile="${dir.jrlibs}/build.xml" target="package" inheritAll="false" inheritRefs="false">
            <property name="polish.home" value="${polish.home}"/>
        </ant>
        <copy file="${dir.jrlibs}/dist/j2merosa-libraries.jar" todir="${dir.tools}"/>
        <!-- Get the full device definitions -->
        <copy file="${device.list}" todir="${basedir}"/>
    </target>

    <!-- Main Target: Call to build the project and call up the emulator -->
    <!-- Builds the code and invokes the emulator -->
    <target name="LaunchEmulator" depends="enableEmulator,disableObfuscator,BuildPolish" description="invokes the emulator">
    </target>

    <!-- Main Target: Set for release, clean and build with obfuscator -->
    <target name="LaunchReleaseEmulator" depends="SetRelease, LaunchEmulator" />


    <!-- Main Target: Call to clean directories created by a build -->
    <target name="Clean" description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
        <delete dir="build" />
        <delete dir="${dir.dist.root}" />
    </target>

    <target name="SetRelease" >
        <property name="commcare.release" value="true" />
        <echo>setting commcare.release to ${commcare.release}</echo>
    </target>

    <!-- Main Target: Set for MVPTZ release, clean and build with obfuscator -->
    <target name="BuildRelease" description="Build a release" depends="SetRelease, BuildClean" />

    <!-- Main Target: Cleans, and then runs the build target -->
    <target name="BuildClean" description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml" depends="Clean, BuildPolish" />

    <!-- Main Target: Cleans, and then runs the build target -->
    <target name="BuildAllClean" description="allows a clean build. You should call [ant cleanbuild] whenever you made changes to devices.xml, vendors.xml or groups.xml" depends="SetBatch, Clean, BuildPolish" />

    <!-- Main Target: Cleans, and then runs the build target with the emulator -->
    <target name="BuildCleanRunEmulator" description="allows a clean build, and then launches the emulator" depends="Clean, enableEmulator, disableObfuscator, BuildPolish" />

    <!-- Main Target: Runs the build with all debug properties enabled -->
    <target name="LaunchEmulatorAndProfilers" description="debugs the project" depends="Clean, enableDebug, enableEmulator, BuildPolish" />

    <!-- Main Target: Builds project and runs j2mepolish Unit Tests on constructed jars -->
    <target name="RunJ2MEUnitTests" depends="disableObfuscator, BuildPolish" description="Runs j2mepolish Unit Tests on constructed jars">
        <!-- Note that most of this testing code was here to test our auto-integration tester, and isn't actually
             usable for testing J2ME code -->
        <!-- The classpath that should be used for tests -->
        <path id="classpath.test">
          <pathelement location="${dir.dist}/${app.jarName}"/>
          <!--pathelement location="${dir.test}" /-->
          <pathelement location="${dir.lib}/j2meunit-javarosa.jar" />
          <path refid="classpath.base" />
        </path>

        <RunTestSuite suite="org.javarosa.patient.test.SelectorTest"/>
        <!-- add new test suites here -->
        <fail if="testresult.global">Unit Tests Failed!</fail>
    </target>




    <target name="PrepareWebDemo" if="dir.web.resources">
        <property name="dir.web.dist.final" value="${dir.dist.root}/${dir.web.dist}"/>
        <property name="dir.web.app.source.final" value="${dir.dist.root}/${dir.web.app.source}"/>

        <delete dir="${dir.web.dist.final}"/>
        <mkdir dir="${dir.web.dist.final}"/>
        <copy todir="${dir.web.dist.final}">
          <fileset dir="${dir.web.resources}">
            <include name="*.jar"/>
              <include name="*.html"/>
          </fileset>
        </copy>

        <javac srcdir="${dir.web.resources}">
            <classpath>
                <pathelement location="${dir.web.resources}/microemulator.jar"/>
                <pathelement location="${dir.web.resources}/"/>
            </classpath>
        </javac>
        <java classname="PrepareMidlet">
            <arg value="${dir.web.app.source.final}/${app.jarName}"/>
            <arg value="${dir.web.dist.final}/${app.jarName}"/>
            <classpath>
                <pathelement location="${dir.web.resources}/microemulator.jar"/>
                <pathelement location="${dir.web.resources}/"/>
            </classpath>
        </java>
    </target>

    <property name="dir.postjad" value="./postjad" />

    <target name="PostJad" description="Post a jad file to commcare hq">
        <taskdef name="py-run" onerror="report" classname="org.pyant.tasks.PythonRunTask" classpath="${dir.tools}/pyAntTasks-1.3.jar"/>
        <py-run script="${dir.postjad}/utilities/submit_build.py" />
    </target>

    <property name="dir.postjad.new" value="./postjadnew" />

    <target name="PostJad10" description="Post a jad file to commcare hq">
        <dirname property="build.zip.dir" file="${build.zip}"/>
        <mkdir dir="${build.zip.dir}"/>
        <zip destfile="${build.zip}">
            <zipfileset dir="${basedir}" includes="${distname}/**"/>
            <zipfileset file="${device.list}" prefix="${distname}"/>
        </zip>
        <taskdef name="py-run" onerror="report" classname="org.pyant.tasks.PythonRunTask" classpath="${dir.tools}/pyAntTasks-1.3.jar"/>
        <py-run script="${dir.postjad.new}/utilities/submit_build.py"/>
    </target>

    <target name="BuildAndPostJad" depends="BuildClean,PostJad10" description="Build the jad and post it."/>

    <target name="BuildReleaseAndPostJad" depends="SetRelease,BuildClean,PostJad10" description="Build the jad and post it."/>

    <!-- This target should prevent us from needing to re-run BuildClean for additional targets -->
    <target name="BuildServerComplete" depends="SetBatch, BuildClean, PrepareWebDemo, PostJad10">
        <ant antfile="../backend/build.xml" target="package" dir="../backend/">
              <property name="dir.lib" value="${dir.lib}"/>
              <property name="dir.jrlib" value="${dir.tools}"/>
        </ant>
    </target>

    <target name="BuildModernLibs" depends="SetBatch, BuildClean">
        <ant antfile="../modern/build.xml" target="package" dir="../modern/">
              <property name="dir.lib" value="${dir.lib}"/>
              <property name="dir.jrlib" value="${dir.tools}"/>
        </ant>
    </target>

    <target name="SetBatch">
        <property name="build.batch" value="true"/>
        <property name="dest.suffix" value="${file.separator}${polish.identifier}${file.separator}"/>
    </target>


    <!-- Initialization for the build targets                    -->
    <target name="init" depends="extract-libs">
        <!-- Disable the Emulator by default -->
        <property name="test" value="false" />

        <condition property="compile.from.source.true">
            <equals arg1="${compile.source}" arg2="true" />
        </condition>

        <condition property="sign.locally">
            <equals arg1="${build.sign}" arg2="true" />
        </condition>
    </target>

    <!-- for use primarily by the build server to extract the required 3rd-party libraries into the
         commcare source tree. (see javarosa-core buildfile for details) -->
    <target name="extract-libs" if="cc.extract-libs-fresh">
        <unzip src="${commcare-deps}" dest="${basedir}" overwrite="true" />
    </target>

    <target name="disableObfuscator">
        <property name="noobfuscate" value="true"/>
    </target>
    <!-- Sets the 'debug' ANT variable to true -->
    <target name="enableDebug">
        <property name="debug" value="true" />
    </target>

    <!-- Enables the emulator by setting 'test' to be true, and setting a working directory -->
    <target name="enableEmulator">
        <property name="test" value="true" />
        <property name="dir.work" value="build/test" />
    </target>

    <!-- Macro: Runs a test suite, and sets testresult.global to be true on failure -->
    <macrodef name="RunTestSuite" description="Runs a test suite, and sets testresult.global to be true on failure">
        <attribute name="suite"/>
        <sequential>
            <!-- Note: The reason that we are using @{suite} as a property is because properties in ANT
            are immutable, and this is a unique identifier -->
        <java classname="j2meunit.textui.TestRunner" failonerror="false" fork="true" resultproperty="@{suite}">
                            <classpath refid="classpath.test" />
                            <arg value="@{suite}"/>
                </java>
        <condition property="testresult.global">
                    <not>
                        <equals arg1="${@{suite}}" arg2="0"/>
                     </not>
                </condition>
        </sequential>
    </macrodef>

    <macrodef name="propertycopy">
      <attribute name="name"/>
      <attribute name="from"/>
      <sequential>
        <property name="@{name}" value="${@{from}}"/>
      </sequential>
    </macrodef>


    <!-- import properties which introduce localization hacks for
         j2me polish commands and UI elements                     -->
    <property file="${basedir}/polish.localehacks.properties" />

    <!-- import non-version-controlled local properties           -->
    <property file="${basedir}/local.properties" />

    <!-- import user specific properties                          -->
    <property file="${basedir}/build.properties" />

    <!-- import global properties                                 -->
    <property file="${polish.home}/global.properties" />

    <property file="${basedir}/key.properties" />

    <property name="TALK" value="true" />

</project>
